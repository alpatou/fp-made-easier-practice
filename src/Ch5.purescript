module Ch5 where

import Prelude (Unit, (+), (-) ,(>), (<), (>=), (/=), (==), (<<<), max, negate, show, discard, otherwise, type (~>))
import Data.List (List(Nil, Cons), (:))
import Effect (Effect)
import Effect.Console (log) 
import Data.Maybe (Maybe(..))
import Data.Ord ((<))

flip:: forall a b c. (a->b->c) -> b -> a -> c
flip func x y = func y x

const :: forall a b. a -> b -> a
const x _ = x

apply :: forall a b. (a->b) -> a -> b
apply f x = f x 
  
infixr 0 apply as $

applyFlipped :: forall a b. a -> (a -> b) -> b
applyFlipped = flip apply

infixl 0 applyFlipped as #

singleton :: forall a. a -> List a
singleton x = Cons x  Nil

null :: forall a. List a -> Boolean
null Nil  = true
null _ = false

snoc :: forall a . List a -> a -> List a
snoc Nil y = singleton y
snoc (x:xs) y = Cons x $ snoc xs y

length :: forall a. List a -> Int
length l = go 0 l where
  go :: Int -> List a -> Int
  go acc Nil = acc
  go acc ( _ : xs ) = go ( acc + 1 ) xs

-- in Haskell there is no null lists for head and tail
head :: forall a. List a -> Maybe a
head Nil = Nothing
head (x:_) = Just x

tail :: forall a. List a -> Maybe (List a)
tail Nil = Nothing
tail ( _ : xs ) = Just xs

last :: forall a. List a -> Maybe a
last Nil = Nothing
last (x:Nil) = Just x
last (_:xs) = last xs

init :: forall a. List a -> Maybe(List a)
init Nil = Nothing
init ( x : Nil ) = Just Nil
init l = Just $ go l where
  go Nil = Nil
  go (_ : Nil) = Nil
  go ( x : xs ) = x : go xs

uncons :: forall a. List a -> Maybe { head :: a, tail :: List a }
uncons Nil = Nothing
uncons (x:xs) = Just { head: x, tail: xs}

index :: forall a. List a -> Int -> Maybe a
index Nil _ = Nothing
index _ i | i < 0 = Nothing
index (x : _) 0 = Just x
index (_ : xs) i = index xs (i -1)

infixl 8 index as !!  

findIndex :: ∀ a. (a -> Boolean) -> List a -> Maybe Int
findIndex _ Nil = Nothing
findIndex predicate l = go 0 l where
      go _ Nil = Nothing
      go index (x : xs) = if predicate x then Just index else go (index + 1) xs

findLastIndex :: ∀ a. (a -> Boolean) -> List a -> Maybe Int
findLastIndex _ Nil = Nothing
findLastIndex pred l =  go Nothing 0 l where 
      go :: Maybe Int -> Int -> List a -> Maybe Int
      go fi _ Nil = fi 
      go fi i (x : xs) = go (if pred x then Just i else fi) (i + 1) xs 

reverse:: List ~> List
reverse l = go Nil l where
  go newList Nil = newList
  go newList (x : xs) = go (x : newList) xs

concat :: forall a. List (List a) -> List a
concat Nil = Nil
concat (Nil : xss) = concat xss
concat ((x : xs) : xss) = x : concat (xs : xss)

{-
filter :: forall a. (a -> Boolean) -> List a -> List a
filter _ Nil = Nil
filter pred (x : xs)  -- this is the way not if's
  | pred x = x : filter pred xs
  | otherwise = filter pred xs
-}

--tail recursive edition
filter :: forall a. (a -> Boolean) -> List a -> List a
filter pred = reverse <<< go Nil where
  go filtered Nil = filtered
  go filtered (x : xs)   
    | pred x =  go (x : filtered) xs
    | otherwise = go filtered xs

catMaybes :: ∀ a. List (Maybe a) -> List a
catMaybes Nil = Nil
catMaybes (x : xs) = case x of 
  Just y -> y : catMaybes xs
  Nothing -> catMaybes xs

{--
range :: Int -> Int -> List Int
range start end | start == end = singleton start
                | otherwise = 
                  start : range (start + if (start < end then 1 else (-1))) end

range :: Int -> Int -> List Int
range start end = go start where
  go step start' | start' ==end = singleton start'
                 | otherwise = start' : go step (start' + step)
  step =  if start < end then 1 else (-1)
--}


range :: Int -> Int -> List Int
range start end = go Nil end start where
  go rl start' end' | start' == end' = start' : rl
               | otherwise = go (start' : rl) (start' + step) end'
  step = if start < end then (-1) else 1


{--
take :: forall a. Int -> List a -> List a
take _ Nil = Nil
take 0 _ = Nil
take howMuch (x : xs) = x : take (howMuch - 1) xs
--}

take :: forall a. Int -> List a -> List a
take howMuch  = reverse <<< go Nil (max 0 howMuch) where
  go takenList _ Nil  = takenList
  go takenList 0 _ = takenList
  go takenList howMuch' (x:xs) = go (x : takenList) (howMuch' - 1) xs


drop :: forall a. Int -> List a -> List a
drop _ Nil = Nil
drop 0 l = l 
drop howMuch (x : xs) = drop (howMuch - 1) xs


{--
takeWhile :: forall a. (a -> Boolean) -> List a -> List a
takeWhile _ Nil = Nil
takeWhile f (x:xs) = if f x then x : takeWhile f xs else Nil

takeWhile :: forall a. (a -> Boolean) -> List a -> List a
takeWhile func = reverse <<< go Nil func where
  go returnList _ Nil = returnList
  go returnList f' (x : xs) = if f' x then go (x : returnList) f' else returnList
--}


takeWhile :: forall a. (a -> Boolean) -> List a -> List a
takeWhile p = go Nil
  where
  go acc (x : xs) | p x = go (x : acc) xs
  go acc _ = reverse acc


dropWhile :: forall a. (a -> Boolean) -> List a -> List a
dropWhile _ Nil = Nil
dropWhile pred (x : xs) = if pred x then dropWhile pred xs else x : xs

takeEnd :: forall a. Int -> List a -> List a
takeEnd _ Nil = Nil
takeEnd howMuch (x:xs)

test:: Effect Unit
test = do
  log $ show $ flip const 1 2
  flip const 1 2 # show # log
  log $ show $ singleton "xyz"
  log $ show $ null Nil
  log $ show $ null ("abc" : Nil)
  log $ show $ snoc (1 : 2 : Nil) 3
  log $ show $ length $ 1 : 2 : 3 : Nil 
  log $ show $ ( head Nil :: Maybe Unit )
  log $ show $ head ("abc" : "123" : Nil)
  log $ show $  tail (Nil :: List Unit )
  log $ show $ tail ("abc" : "123" : Nil)
  log $ show $ ( last Nil :: Maybe Unit )
  log $ show $ last $ "a" : "b" : "c" : Nil
  log $ show $ init (Nil :: List Unit)
  log $ show $ init ( 1 : Nil )
  log $ show $ init ( 1 : 2 : Nil )
  log $ show $ init ( 1 : 2 : 3 : Nil )
  log $ show $ uncons (1 : 2 : 3 : Nil)
  log $ show $ index (1 : Nil) 4 
  log $ show $ index (1 : 2 : 3 : Nil) 1
  log $ show $ index (Nil :: List Unit) 0 
  log $ show $ ( 1 : 2 : 3 : Nil ) !! 1
  log $ show $ findIndex (_ >= 2) (1 : 2 : 3 : Nil) 
  log $ show $ findIndex (_ >= 99) (1 : 2 : 3 : Nil) 
  log $ show $ findIndex (10 /= _) (Nil :: List Int) 
  log $ show $ findLastIndex (_ == 10) (Nil :: List Int)
  log $ show $ findLastIndex (_ == 10) (10 : 5 : 10 : -1 : 2 : 10 : Nil)
  log $ show $ findLastIndex (_ == 10) (11 : 12 : Nil)
  log $ show $ reverse (10 : 20 : 30 : Nil)
  log $ show $ concat ((1 : 2 : 3 : Nil) : (4 : 5 : Nil) : (6 : Nil) : (Nil) : Nil)
  log $ show $ filter (4 > _) $ (1 : 2 : 3 : 4 : 5 : 6 : Nil) 
  log $ show $ catMaybes (Just 1 : Nothing : Just 2 : Nothing : Nothing : Just 5 : Nil)
  log $ show $ range 1 10
  log $ show $ range 3 (-3)
  log $ show $ take 5 (12 : 13 : 14 : Nil) 
  log $ show $ take 5 (-7 : 9 : 0 : 12 : -13 : 45 : 976 : -19 : Nil) 
  log $ show $ drop 2 (1 : 2 : 3 :4 : 5 : 6 :7  : Nil) 
  log $ show $ drop (-2) (1 : 2 : 3 :4 : 5 : 6 :7  : Nil) 
  log $ show $ drop 10 (Nil :: List Unit) 
  log $ show $ takeWhile (_ > 3) (5 : 4 : 3 : 99 : 101 : Nil) 
  log $ show $ takeWhile (_ == -17) (1 : 2 : 3 : Nil) 
  log $ show $ dropWhile (_ > 3) (5 : 4 : 3 : 99 : 101 : Nil) 
  log $ show $ dropWhile (_ == -17) (1 : 2 : 3 : Nil) 
  log $ show $ takeEnd 3 (1 : 2 : 3 : 4 : 5 : 6 : Nil) 
  log $ show $ takeEnd 10 (1 : Nil) 
